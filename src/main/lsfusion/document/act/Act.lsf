MODULE Act;

REQUIRE Agreement, Doc;

NAMESPACE Act;


CLASS Act 'Акт выполненных работ' : Document;
TABLE act (Act);

id 'Код' = DATA STRING[15] (Act) INDEXED CHARWIDTH 5;
act (id) = GROUP AGGR Act c BY id (c);

name 'Наименование' = DATA ISTRING[150](Act) CHARWIDTH 20;
series 'Серия' = DATA STRING[15](Act) IN id;
number 'Номер' = DATA STRING[15](Act) IN id;

@defineNumeratedDefault(Act, 'Акты', 'АК');

contract = DATA Contract(Act) INDEXED;
idContract 'Код договора' (Act a) = id(contract(a));
numberContract 'Номер договора' (Act a) = number(contract(a)) IN id;
customer (Act a) = customer(contract(a)) MATERIALIZED INDEXED;
nameCustomer 'Клиент' (Act a) = nameCustomer(contract(a));
legalEntity (Act a) = legalEntity(contract(a)) MATERIALIZED INDEXED;
nameLegalEntity 'Организация' (Act a) = nameLegalEntity(contract(a));
company (Act a) = company(contract(a)) MATERIALIZED INDEXED;
nameCompany 'Компания' (Act a) = name(company(a));

authorisedPersonLegalEntity = DATA Contact.Contact(Act);
idAuthorisedPersonLegalEntity 'Код уп. лица организации' (Act c) = id(authorisedPersonLegalEntity(c));
nameAuthorisedPersonLegalEntity 'Уп. лицо организации' (Act c) = name(authorisedPersonLegalEntity(c));
authorisedDocumentLegalEntity 'На основании' = DATA ISTRING[1000](Act) CHARWIDTH 20;

authorisedPersonCompany  (Act c) = DATA Contact.Contact(Act);
idAuthorisedPersonCompany 'Код уп. лица компании' (Act c) = id(authorisedPersonCompany(c));
nameAuthorisedPersonCompany 'Уп. лицо компании' (Act c) = name(authorisedPersonCompany(c));
authorisedDocumentCompany 'На основании' = DATA ISTRING[1000](Act) CHARWIDTH 20;

WHEN LOCAL (CHANGED (legalEntity(Act c)) OR CHANGED (contract(c))) AND NOT CHANGED (authorisedPersonLegalEntity(c)) DO {
    authorisedPersonLegalEntity (c) <- OVERRIDE authorisedPersonLegalEntity(contract(c)), authorisedPerson(legalEntity(c));
    authorisedDocumentLegalEntity (c) <- OVERRIDE authorisedDocumentLegalEntity(contract(c)), authorisedDocument(authorisedPersonLegalEntity(c)), authorisedDocument(legalEntity(c));
}
WHEN LOCAL CHANGED (authorisedPersonLegalEntity(Act c)) AND NOT (CHANGED (legalEntity(c)) OR CHANGED (contract(c))) DO {
    authorisedDocumentLegalEntity (c) <- authorisedDocument(authorisedPersonLegalEntity(c));
}
WHEN LOCAL (CHANGED (company(Act c)) OR CHANGED (contract(c))) AND NOT CHANGED (authorisedPersonCompany(c)) DO {
    authorisedPersonCompany (c) <- OVERRIDE authorisedPersonCompany(contract(c)), authorisedPerson(company(c));
    authorisedDocumentCompany (c) <- OVERRIDE authorisedDocumentCompany(contract(c)), authorisedDocument(authorisedPersonCompany(c)), authorisedDocument(company(c));
}
WHEN LOCAL CHANGED (authorisedPersonCompany(Act c)) AND NOT (CHANGED (company(c)) OR CHANGED(contract(c))) DO {
    authorisedDocumentCompany (c) <- authorisedDocument(authorisedPersonCompany(c));
}

CONSTRAINT authorisedPersonLegalEntity(Act c) AND NOT legalEntity(authorisedPersonLegalEntity(c)) == legalEntity(c) 
    CHECKED BY authorisedPersonLegalEntity[Act] MESSAGE 'Организация уполномоченного лица не совпадает с организацией договора';
CONSTRAINT authorisedPersonCompany(Act c) AND NOT legalEntity(authorisedPersonCompany(c)) == company(c) 
    CHECKED BY authorisedPersonCompany[Act] MESSAGE 'Организация уполномоченного лица не совпадает с компанией договора';
CONSTRAINT Act a IS Act AND NOT contract(a) MESSAGE 'Для акта должен быть задан договор';

agreement = DATA Agreement(Act);
idAgreement 'Код соглашения' (Act a) = id(agreement(a));
numberAgreement 'Номер соглашения' (Act a) = number(agreement(a)) IN id;

CONSTRAINT contract(Act a) != contract(agreement(a)) CHECKED BY agreement[Act] MESSAGE 'Договор акта не соответствует договору';

date 'Дата' = DATA DATE (Act) IN id;
year 'Год' (Act a) = extractYear(date(a));

fromDate 'Дата с' = DATA DATE (Act);
toDate 'Дата по' = DATA DATE (Act);

CLASS ActType 'Тип акта выполненных работ' : Type;
TABLE actType(ActType);

name 'Наименование' = DATA ISTRING[50](ActType) CHARWIDTH 15;

name(ActType c) += name(c);

FORM actType 'Тип акта'
    OBJECTS o = ActType PANEL
    PROPERTIES(o) name
    
    EDIT ActType OBJECT o
;

FORM actTypes 'Типы акта'
    OBJECTS o = ActType
    PROPERTIES(o) READONLY name
    PROPERTIES (o) NEWSESSION NEW, EDIT, DELETE
    
    LIST ActType OBJECT o
;

type = DATA ActType(Act);
nameType 'Тип акта' (Act c) = name(type(c)) CHARWIDTH 15;

actType = DATA ActType(ContractType);
nameActType 'Тип акта' (ContractType t) = name(actType(t));

EXTEND FORM contractTypes PROPERTIES nameActType(o);
EXTEND FORM contractType PROPERTIES nameActType(o);

sum 'Сумма' = DATA NUMERIC[16,5](Act);

dateSigningCompany 'Дата подписания компанией' = DATA DATE (Act);
dateSending 'Дата отправки' = DATA DATE (Act);
dateSigningCustomer 'Дата подписания клиентом' = DATA DATE (Act);
dateReceiving 'Дата получения' = DATA DATE (Act);
dateClosing 'Дата закрытия' = DATA DATE (Act);

active (Act c) = NOT dateClosing(c) <= currentDate();

note 'Примечание' = DATA ISTRING[100](Act) CHARWIDTH 20;
text 'Текст' = DATA TEXT (Act);
textString 'Текст' (Act c) = ISTRING[500](text(c)) CHARWIDTH 20;

sendingWay = DATA SendingWay(Act);
nameSendingWay 'Способ отправки документа' (Act c) = name(sendingWay(c));

id(Act c) += id(c);
number(Act c) += number(c);
name(Act c) += name(c);
date(Act c) += date(c);
type(Act c) += type(c);
note(Act c) += note(c);
text(Act c) += text(c);
dateSigningCompany(Act c) += dateSigningCompany(c);
dateSending(Act c) += dateSending(c);
dateSigningCustomer(Act c) += dateSigningCustomer(c);
dateReceiving(Act c) += dateReceiving(c);
dateClosing(Act c) += dateClosing(c);
customer(Act c) += customer(c);
legalEntity(Act a) += legalEntity(a);
company(Act a) += company(contract(a));
contract(Act a) += contract(a);
sum(Act c) += sum(c);
inCurrency(Act a) += inCurrency(contract(a));
currency(Act a) += currency(contract(a));
description(Act c) += CONCAT ' ', 'Акт', '№' + number(c), 'от ' + toDateDDMMYY(date(c)), 'по дог.', '№' + number(contract(c)), 'от ' + toDateDDMMYY(date(contract(c)));
sendingWay(Act c) += sendingWay(c);
fileName(Act c) += ISTRING[250] (CONCAT '_', nameLegalEntity(c), 'Акт', number(c), 'от_' + toDateDDMMYY(date(c)));

EXTEND CLASS DocType {
    act 'Акт выполненных работ'
}
docType(Act a) += DocType.act IF a IS Act;
docType(ActType c) += DocType.act IF c IS ActType;

forbidChange 'Запрет на редактирование' = ABSTRACT VALUE BOOLEAN (Act);

CONSTRAINT (forbidChange(Act a)) AND (CHANGED (date(a)) OR CHANGED (number(a)) OR CHANGED (series(a)) OR CHANGED (contract(a)) OR CHANGED (sum(a)))
    MESSAGE 'Запрещено редактировать данный акт';

FORM act 'Акт выполненных работ'
    OBJECTS o = Act PANEL
    PROPERTIES(o) id, number, date, name, nameType, numberContract, numberAgreement, nameCustomer READONLY, nameLegalEntity READONLY, sum, 
                  dateSending, dateReceiving, dateClosing, note, text, nameCompany READONLY, nameNumerator, series, nameSendingWay,
                  nameAuthorisedPersonLegalEntity, nameAuthorisedPersonCompany, authorisedDocumentLegalEntity, authorisedDocumentCompany, fromDate, toDate
    
    EDIT Act OBJECT o
;

DESIGN act {
    BOX (o) {
        fill = 1;
        NEW row1 {
            horizontal = TRUE;
            alignment = STRETCH;
            NEW main {
                caption = 'Основные параметры';
                MOVE PROPERTY(id(o));
                MOVE PROPERTY (name(o));
                MOVE PROPERTY (nameNumerator(o));
                NEW number {
                    horizontal = TRUE;
                    MOVE PROPERTY (series(o));
                    MOVE PROPERTY (number(o));
                }
                MOVE PROPERTY(nameType(o));
                MOVE PROPERTY(date(o));
                NEW period {
                    caption = 'Период оказания услуг';
                    horizontal = TRUE;
                    MOVE PROPERTY (fromDate(o));
                    MOVE PROPERTY (toDate(o));
                }
            }
            NEW legalEntities {
                caption = 'Контрагенты';
                flex = 1;
                MOVE PROPERTY(numberContract(o));
                MOVE PROPERTY(numberAgreement(o));
                MOVE PROPERTY(nameCompany(o));
                NEW autC {
                    horizontal = TRUE;
                    fill = 1;
                    MOVE PROPERTY (nameAuthorisedPersonCompany(o));
                    MOVE PROPERTY (authorisedDocumentCompany(o));
                }
                MOVE PROPERTY(nameCustomer(o));
                MOVE PROPERTY(nameLegalEntity(o));
                NEW autL {
                    horizontal = TRUE;
                    fill = 1;
                    MOVE PROPERTY (nameAuthorisedPersonLegalEntity(o));
                    MOVE PROPERTY (authorisedDocumentLegalEntity(o));
                }
            }
        }
        NEW processing {
            horizontal = TRUE;
            caption = 'Обработка';
            MOVE PROPERTY(nameSendingWay(o));
            MOVE PROPERTY(dateSending(o));
            MOVE PROPERTY(dateReceiving(o));
            MOVE PROPERTY(dateClosing(o));
        }
        NEW row3 {
            horizontal = TRUE;
            NEW payment {
                caption = 'Задолженность';
                horizontal = TRUE;
                MOVE PROPERTY(sum(o));
            }
            NEW add {
                horizontal = TRUE;
                caption = 'Дополнительная информация';
                MOVE PROPERTY(note(o));
            }
        }
        NEW tab {
            tabbed = TRUE;
            fill = 1;
            NEW text {
                caption = 'Текст';
                MOVE PROPERTY(text(o)) {
                    caption = '';
                    fill = 1;
                }
            }
        }
    }
}

FORM acts 'Акты выполненных работ'
    OBJECTS o = Act LAST 
    PROPERTIES(o) READONLYIF isReadonly() id, numberContract, numberAgreement, number, date, fromDate, toDate, name, 
                             nameType, sum, nameSendingWay, dateSending, dateReceiving, dateClosing, note, textString
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE
    ORDERS date(o)
;

@extendFormEditable(acts);

FORM dialogActs 'Акты выполненных работ'
    OBJECTS o = Act LAST 
    PROPERTIES(o) READONLY id, numberContract, numberAgreement, number, date, fromDate, toDate, name, nameType, sum, nameSendingWay, dateSending, dateReceiving, dateClosing, note, textString
    ORDERS date(o)

    FILTERGROUP active
        FILTER 'Активные' NOT dateClosing(o) <= currentDate() DEFAULT
    
    LIST Act OBJECT o
;

NAVIGATOR {
    contractFolder {
        NEW acts;
        NEW contractTypes;
    }
}

addAct 'Добавить' (Contract c) {
    NESTEDSESSION NEW a = Act {
        contract(a) <- c;
        date(a) <- currentDate();
        SHOW act OBJECTS o = a DOCKED;
    }
} IMAGE 'add.png'  CHANGEKEY 'INSERT' HIDE;

EXTEND FORM contract 
    OBJECTS ac = Act LAST 
    PROPERTIES (ac) READONLY id, numberContract, numberAgreement, number, date, fromDate, toDate, name, nameType, sum, nameSendingWay, dateSending, dateReceiving, dateClosing, note, textString
    PROPERTIES DRAW ac TOOLBAR addAct(o)
    PROPERTIES(ac) NESTEDSESSION EDIT, DELETE
    ORDERS date(ac)
    FILTERS contract(ac) == o
    FILTERGROUP activeAc FILTER 'Активные' active(ac) DEFAULT 
;

DESIGN contract {
    details {
        MOVE BOX (ac) {
            caption = 'Акты выполненных работ';
        }
    }
}

WHEN SET (Act a IS Act) AND NOT number(a) DO {  
    number(a) <- ISTRING[15] (INTEGER ([GROUP MAX number(Act ac) BY contract(ac), year(ac)](contract(a), year(a))) (+) 1); 
}